// Generated by LiveScript 1.5.0
var ref$, exec, spawn, path, async, chalk, gulp, conflict, template, rename, inquirer, minimist, debug, args, answers, templatesPath, layoutSrc, styleSrc, styleName, styleDest, scriptSrc, scriptName, scriptDest, defaults, shutdown, askQuestions, copyFiles, setPaths;
ref$ = require('child_process'), exec = ref$.exec, spawn = ref$.spawn;
path = require('path');
async = require('async');
chalk = require('chalk');
gulp = require('gulp');
conflict = require('gulp-conflict');
template = require('gulp-template');
rename = require('gulp-rename');
inquirer = require('inquirer');
minimist = require('minimist');
debug = require('debug')('slush-hexo-theme');
args = {};
answers = {};
templatesPath = path.join(__dirname, 'templates');
layoutSrc = void 8;
styleSrc = void 8;
styleName = void 8;
styleDest = void 8;
scriptSrc = void 8;
scriptName = void 8;
scriptDest = void 8;
defaults = {
  name: path.basename(process.env.PWD || process.cwd()),
  tmpl: 'ejs',
  style: 'styl',
  other: []
};
shutdown = function(err){
  console.error('gulp error', err);
  return process.exit();
};
askQuestions = function(cb){
  var name, tmpl, style, other, questions;
  debug('askQuestions');
  name = {
    name: 'name',
    type: 'input',
    message: 'name',
    'default': args.name || defaults.name
  };
  tmpl = {
    name: 'tmpl',
    type: 'list',
    message: 'template language',
    choices: ['ejs', 'nunjucks', 'pug', 'swig'],
    'default': args.tmpl || defaults.tmpl
  };
  style = {
    name: 'style',
    type: 'list',
    message: 'stylesheet language',
    choices: ['styl', 'scss', 'sass', 'less', 'css'],
    'default': args.style || defaults.style
  };
  other = {
    name: 'other',
    type: 'checkbox',
    message: 'other',
    choices: [
      {
        name: 'Hexo scripts directory (hexo plugins)',
        value: 'hexo-scripts'
      }, {
        name: 'Bower: bower.json, .bowerrc',
        value: 'bower'
      }, {
        name: '.editorconfig',
        value: 'editorconfig'
      }
    ]
  };
  questions = [name, tmpl, style, other];
  return inquirer.prompt(questions).then(cb);
};
copyFiles = function(cb){
  var steps;
  debug('copyFiles');
  steps = [];
  steps.push(function(cb){
    debug('step: layout');
    return gulp.src(path.join(layoutSrc)).pipe(conflict('./layout')).pipe(gulp.dest('./layout')).on('finish', cb).on('error', shutdown);
  });
  steps.push(function(cb){
    debug('step: style');
    return gulp.src(styleSrc).pipe(rename(styleName)).pipe(conflict(styleDest)).pipe(gulp.dest(styleDest)).on('finish', cb).on('error', shutdown);
  });
  steps.push(function(cb){
    debug('step: layout');
    return gulp.src(scriptSrc).pipe(template(answers)).pipe(rename(scriptName)).pipe(conflict(scriptDest)).pipe(gulp.dest(scriptDest)).on('finish', cb).on('error', shutdown);
  });
  steps.push(function(cb){
    debug('step: config');
    return gulp.src(path.join(templatesPath, '_config.yml')).pipe(template(answers)).pipe(conflict('./')).pipe(gulp.dest('./')).on('finish', cb).on('error', shutdown);
  });
  if (answers.other.indexOf('hexo-scripts') !== -1) {
    steps.push(function(cb){
      debug('step: hexo-scripts');
      return gulp.src(path.join(templatesPath, 'scripts')).pipe(conflict('./scripts')).pipe(gulp.dest('./scripts')).on('finish', cb).on('error', shutdown);
    });
  }
  if (answers.other.indexOf('bower') !== -1) {
    steps.push(function(cb){
      debug('step: bower');
      return gulp.src(templatesPath + "/.bowerrc").pipe(template(answers)).pipe(conflict('./')).pipe(gulp.dest('./')).on('finish', cb).on('error', shutdown);
    });
    steps.push(function(cb){
      return gulp.src(templatesPath + "/bower.json").pipe(template(answers)).pipe(conflict('./')).pipe(gulp.dest('./')).on('finish', cb).on('error', shutdown);
    });
  }
  if (answers.other.indexOf('editorconfig') !== -1) {
    steps.push(function(cb){
      debug('step: editorconfig');
      return gulp.src(path.join(templatesPath, '.editorconfig')).pipe(conflict('./')).pipe(gulp.dest('./')).on('finish', cb).on('error', shutdown);
    });
  }
  return async.series(steps, cb);
};
setPaths = function(){
  layoutSrc = templatesPath + "/layout-" + answers.tmpl + "/**/*";
  styleSrc = templatesPath + "/styles/style." + answers.style;
  styleName = answers.name + "." + answers.style;
  styleDest = "./source/css";
  scriptSrc = templatesPath + "/client.js";
  scriptName = answers.name + ".js";
  return scriptDest = "./source/js";
};
gulp.task('default', function(done){
  debug('task: default');
  args = import$(import$({}, defaults), minimist(process.argv));
  if (args.nq === true) {
    answers = import$(answers, args);
    setPaths();
    return copyFiles(done);
  }
  askQuestions(function(res){
    answers = import$(answers, res);
    setPaths();
    return copyFiles(done);
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
//# sourceMappingURL=slushfile.js.map
